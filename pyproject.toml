# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "factorio-learning-environment"
packages = [
    { include = "fle", from = "src" },
]
include = ["src/fle/grpc/proto/**/*.py"] # Needs explicit include because we .gitignore the generated sources
version = "0.1.0"
description = "`factorio-learning-environment` is a toolkit for evaluating machine learning and optimization algorithms on tasks within the world of Factorio https://www.factorio.com/"
readme = "README.md"
authors = ["Kenneth Reid <Ken@kenreid.co.uk>", "Iliya Miralavy", "Stephen Kelly", "Edmund Fokschaner", "Wolfgang Banzhaf"]
license = "MIT"
repository = "https://github.com/DrKenReid/factorio-learning-environment"
homepage = "https://github.com/DrKenReid/factorio-learning-environment"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["factorio", "optimization", "ai", "machine-learning", "openai"]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: POSIX :: Linux",
  "Topic :: Games/Entertainment :: Simulation",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3"
]

[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"fle" = "fle.__main__:main"

[tool.poetry.dependencies]
python = "^3.8"
importlib_metadata = {version = "^4.12.0", python = "<3.8"}
attrs = "^21.2.0"
anyio = "^3.6.1"
cattrs = "^22.1.0"
numpy = "^1.22.4"
gym = "^0.24.1"
betterproto = {git = "https://github.com/efokschaner/python-betterproto", rev = "72d2eb6b1ddd952d8acf943def6f6963d23e2bc3"}
typer = "^0.4.1"
protobuf = "^3.20.1"
pytest = { version = "^7.1.2", optional = true }
pytest-asyncio = { version = "^0.18.3", optional = true }

[tool.poetry.dev-dependencies]
bandit = "^1.7.4"
black = {version = "^22.6", allow-prereleases = true}
darglint = "^1.8.1"
isort = {extras = ["colors"], version = "^5.10.1"}
mypy = "^0.961"
mypy-extensions = "^0.4.3"
pre-commit = "^2.19.0"
pydocstyle = "^6.1.1"
pylint = "^2.14.4"
safety = "^1.10.3"
coverage = {extras = ["toml"], version = "^6.4"}
coverage-badge = "^1.1.0"
pytest-html = "^3.1.1"
pytest-cov = "^3.0.0"
tox = "^3.25.1"
betterproto = {git = "https://github.com/efokschaner/python-betterproto", rev = "72d2eb6b1ddd952d8acf943def6f6963d23e2bc3", extras = ["compiler"]}
grpcio-tools = "^1.47.0"
tox-gh-actions = "^2.9.1"
Jinja2 = "^3.1.3"
safety-db = "^2021.7.17"
pyupgrade = "^2.34.0"
pytest = "^7.1.2"
pytest-asyncio = "^0.18.3"
tox-poetry-installer = "^0.8.4"

[tool.poetry.extras]
tests = ["pytest", "pytest-asyncio"]

[tool.black]
# https://github.com/psf/black
target-version = ["py38"]
line-length = 88
color = true

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 38
line_length = 88

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
# This affects vscode's ability to use isort
color_output = false
extend_skip = ["src/fle/grpc/proto"] # Dont complain about generated python

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
pretty = true
show_traceback = true
color_output = true

install_types = true
non_interactive = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = true
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = 'fle.grpc.proto.*' # The generated code doesn't fully satisfy mypy
ignore_errors = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
testpaths = [
  "tests"
]
log_level = "debug"

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
concurrency = ["thread", "multiprocessing"]
data_file = ".coverage/.coverage"
parallel = true

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'def __repr__',
    'raise NotImplementedError',
    'if 0:',
    'if __name__ == .__main__.:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod'
]

[tool.pylint.BASIC]
good-names-rgxs = [
  "^[a-z]$", # Allow all 1-letter variable names
  "^[A-Z]$", # Allow all 1-letter upper-case TypeVar names
  "^[a-z][a-z]$" # Allow all 2-letter variable names. Regex {1,2} doesnt seem to work here
]
ignore-paths = "src/fle/grpc/proto/.*"

[tool.pylint.SIMILARITIES]
ignore-imports = true
ignore-signatures = true

[tool.pylint.'MESSAGES CONTROL']
disable = [
  "fixme",
  "global-statement",
  "line-too-long", # black deals with line length and is a soft enforcement
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "too-few-public-methods",
  "too-many-branches",
  "too-many-locals"
]
